import * as connect from 'connect';
import * as compression from 'compression';
import * as session from 'express-session';
import * as cookieParser from 'cookie-parser';
import * as bodyParser from 'body-parser';
import * as serveStatic from 'serve-static';
import * as url from 'url';
import * as http from 'http';
import * as potato from '@po-to/potato-node';
import statics =  require('./statics');
import * as app from './app';
import * as ejs from 'ejs';

potato.setConfig({
    core:app.core,
    amdPaths:{
        'static':"`$$STATICFULLURL`",
    },
    amdCaches:{
        'ejs.js': ejs
    }
});
let staticSite: (req: http.IncomingMessage, res: http.ServerResponse, next: (error?: Error) => void) => void = serveStatic('`$$STATICDIST`', {
    'index': false, 'redirect':false, 'fallthrough': true, 'setHeaders': function (res, path) {
        //res.setHeader('Access-Control-Allow-Origin', '*')
    }
});
let staticBuilder: (req: http.IncomingMessage, res: http.ServerResponse) => void = statics('`$$STATICDIST`');

let server = connect()
    .use(compression())
    .use(function (req: http.IncomingMessage, res: http.ServerResponse, next: (error?: Error) => void) {
        let arr = (req.headers.host+req.url).split("?");//www.wph.com:3333/static/aaa
        let urlStr: string = arr[0];
        let staticUrlArr = "`$$STATICFULLURL`".split("://");
        if(urlStr.startsWith(staticUrlArr[1])){
            req.url = urlStr.replace(staticUrlArr[1],'');
            staticSite(req, res, function(){
                staticBuilder(req,res);
            })            
        }else{
            let dirs = urlStr.substr(urlStr.indexOf("/")+1).split("/");
            if(dirs[0]==""){
                dirs = ['page','articles','home'];
            }
            if(dirs[0]=="page"){
                dirs.shift();
                req.url = "/page/"+dirs.join("-")+(arr[1]?"?"+arr[1]:"");
            }
            next();
        }
        
        // let sites: { [key: string]: string } = (`$$SITES` as any);
        // let url: string | undefined, domain: string = '';
        // let staticUrl = "`$$STATICURL`";
        // let staticHost = staticUrl.substr(staticUrl.indexOf("//") + 2);
        // for (domain in sites) {
        //     let src = sites[domain];
        //     if (host == domain.substr(domain.indexOf("://")+3)) {
        //         url = src + req.url;
        //         break;
        //     }
        // }
        // if (url) {
        //     if (domain.substr(domain.indexOf("://")+3) == staticHost) {
        //         req.url = url;
        //         staticSite(req, res, function(){
        //             staticBuilder(req,res);
        //         })
        //     } else {
        //         req.url = "/"+url;
        //         next();
        //     }
        // } else {
        //     next(new Error('404 not found!'));
        // }
    })
    .use(potato.MRouting)
    .use(bodyParser.json())//parse application/json
    .use(bodyParser.urlencoded({ extended: false }))//parse application/x-www-form-urlencoded
    .use(cookieParser('test'))
    .use(session({
        secret: 'test',
        resave: false,
        saveUninitialized: true,
    }))
    .use(potato.MEntrance)
    .use(function (err:any, req: http.IncomingMessage, res: http.ServerResponse, next) {
        let status = parseInt(err.status || err.message) || 500;
        let code = parseFloat(err.status || err.message) || 500;
        let note = err.message || '';
        res.writeHead(status);
        res.end(note);

        // set locals, only providing error in development
        //res.locals.message = err.message;
        //res.locals.error = req.entrance.get('env') === 'development' ? err : {};

        // render the error page
        //res.status(err.status || 500);
        //

    })
    .listen(`$$PORT`);

