import * as potato from '@po-to/potato-node';
import * as IPotato from '@po-to/potato';
import * as url from 'url';
import * as http from 'http';

import request = require('request');

export interface IModConfig{
    header?: string,
    banner?: string,
    nav?: string,
    footer?: string,
    title?: string,
    keywords?: string,
    description?: string,
    config?: string,
}

let controllers: potato.IControllers = (function () {
    let map = require('./controllers.json');
    let controllers: { [key: string]: potato.Controller } = {};
    for (let key in map) {
        controllers[key] = require(map[key]).instance;
    }
    return {
        getController: function (path: string): potato.Controller | null {
            return controllers[path] || null;
        }
    };
})()



export class Core extends potato.Core {


    protected readonly _controllers = controllers;

    entrance(req: IPotato.IHttpRequest, res: http.ServerResponse, resolve: (data: any) => void, reject: (error: Error) => void) {
        super.entrance(req, res, function (data: any) {
            if (typeof data != "string") {
                data = JSON.stringify(data);
                res.writeHead(200, {
                    'Content-Type': 'text/json; charset=utf-8',
                })
            }else{
                res.writeHead(200, {
                    'Content-Type': 'text/html; charset=utf-8',
                })
            }
            resolve(data);
        }, reject);
    }
    toUrl(req: potato.Request, toAmd?: boolean, noArgs?: boolean): string {
        let str = super.toUrl(req, toAmd, noArgs);
        return "`$$SITEURL`/"+str;
    }
    modToRealUrl(parent:potato.Request, modPath:string, pagePath?:string):string{
        if(pagePath){
            return new potato.Request(parent,pagePath,'Item',modPath).toUrl();
        }else{
            return new potato.Request(parent,modPath,'Item').toUrl();
        }
    }
}
export let core: Core = new Core();